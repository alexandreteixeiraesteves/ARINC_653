open Complex
open Sndlib
open Myprog
open Fft
open Ifft

const zero_f_256 : float^256 = 0.0^256

fun float_to_complex(f:float) returns (c:complex)
let
	c = {re = f;im = 0.0};
tel

fun complex_to_float(c:complex) returns (f:float)
let
        f = c.re;
tel

node main () returns ()
var 
	s0, s1, s2, s3, t : float^256;
	s, o : float^1024;
let 
	s0 = myread(256);
	
	s1 = zero_f_256 fby s0;
	s2 = zero_f_256 fby s1;
	s3 = zero_f_256 fby s2;

	s = s3@s2@s1@s0 ; 		(* concat√©nation *)
	
	o = pitch_algo(s);		(*PITCH_ALGO*)	
	
	t = o[0..255];			(*extract [0..255]*)

	() = mywrite(256, t);
	
tel
